/*
 * Camel Api Route test generated by camel-api-component-maven-plugin
 * Generated on: Mon May 28 16:47:45 CEST 2018
 */
package org.apache.camel.component.fhir;

import java.util.HashMap;
import java.util.Map;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.fhir.internal.FhirApiCollection;
import org.apache.camel.component.fhir.internal.FhirHistoryApiMethod;
import org.junit.Ignore;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Test class for {@link org.apache.camel.component.fhir.api.FhirHistory} APIs.
 * TODO Move the file to src/test/java, populate parameter values, and remove @Ignore annotations.
 * The class source won't be generated again if the generator MOJO finds it under src/test/java.
 */
public class FhirHistoryIntegrationTest extends AbstractFhirTestSupport {

    private static final Logger LOG = LoggerFactory.getLogger(FhirHistoryIntegrationTest.class);
    private static final String PATH_PREFIX = FhirApiCollection.getCollection().getApiName(FhirHistoryApiMethod.class).getName();

    // TODO provide parameter values for onInstance
    @Ignore
    @Test
    public void testOnInstance() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is org.hl7.fhir.instance.model.api.IIdType
        headers.put("CamelFhir.id", null);
        // parameter type is Class
        headers.put("CamelFhir.returnType", null);
        // parameter type is Integer
        headers.put("CamelFhir.count", null);
        // parameter type is java.util.Date
        headers.put("CamelFhir.cutoff", null);
        // parameter type is org.hl7.fhir.instance.model.api.IPrimitiveType
        headers.put("CamelFhir.iCutoff", null);

        final org.hl7.fhir.instance.model.api.IBaseBundle result = requestBodyAndHeaders("direct://ONINSTANCE", null, headers);

        assertNotNull("onInstance result", result);
        LOG.debug("onInstance: " + result);
    }

    // TODO provide parameter values for onServer
    @Ignore
    @Test
    public void testOnServer() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is Class
        headers.put("CamelFhir.returnType", null);
        // parameter type is Integer
        headers.put("CamelFhir.count", null);
        // parameter type is java.util.Date
        headers.put("CamelFhir.cutoff", null);
        // parameter type is org.hl7.fhir.instance.model.api.IPrimitiveType
        headers.put("CamelFhir.iCutoff", null);

        final org.hl7.fhir.instance.model.api.IBaseBundle result = requestBodyAndHeaders("direct://ONSERVER", null, headers);

        assertNotNull("onServer result", result);
        LOG.debug("onServer: " + result);
    }

    // TODO provide parameter values for onType
    @Ignore
    @Test
    public void testOnType() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is Class
        headers.put("CamelFhir.theResourceType", null);
        // parameter type is Class
        headers.put("CamelFhir.returnType", null);
        // parameter type is Integer
        headers.put("CamelFhir.count", null);
        // parameter type is java.util.Date
        headers.put("CamelFhir.cutoff", null);
        // parameter type is org.hl7.fhir.instance.model.api.IPrimitiveType
        headers.put("CamelFhir.iCutoff", null);

        final org.hl7.fhir.instance.model.api.IBaseBundle result = requestBodyAndHeaders("direct://ONTYPE", null, headers);

        assertNotNull("onType result", result);
        LOG.debug("onType: " + result);
    }

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            public void configure() {
                // test route for onInstance
                from("direct://ONINSTANCE")
                    .to("fhir://" + PATH_PREFIX + "/onInstance");

                // test route for onServer
                from("direct://ONSERVER")
                    .to("fhir://" + PATH_PREFIX + "/onServer");

                // test route for onType
                from("direct://ONTYPE")
                    .to("fhir://" + PATH_PREFIX + "/onType");

            }
        };
    }
}
