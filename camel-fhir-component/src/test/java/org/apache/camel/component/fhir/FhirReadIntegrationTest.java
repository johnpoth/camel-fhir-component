/*
 * Camel Api Route test generated by camel-api-component-maven-plugin
 * Generated on: Mon May 28 16:47:45 CEST 2018
 */
package org.apache.camel.component.fhir;

import java.util.HashMap;
import java.util.Map;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.fhir.internal.FhirApiCollection;
import org.apache.camel.component.fhir.internal.FhirReadApiMethod;
import org.junit.Ignore;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Test class for {@link org.apache.camel.component.fhir.api.FhirRead} APIs.
 * TODO Move the file to src/test/java, populate parameter values, and remove @Ignore annotations.
 * The class source won't be generated again if the generator MOJO finds it under src/test/java.
 */
public class FhirReadIntegrationTest extends AbstractFhirTestSupport {

    private static final Logger LOG = LoggerFactory.getLogger(FhirReadIntegrationTest.class);
    private static final String PATH_PREFIX = FhirApiCollection.getCollection().getApiName(FhirReadApiMethod.class).getName();

    // TODO provide parameter values for resourceWithId
    @Ignore
    @Test
    public void testResourceWithId() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is Class
        headers.put("CamelFhir.resource", null);
        // parameter type is String
        headers.put("CamelFhir.id", null);
        // parameter type is String
        headers.put("CamelFhir.ifVersionMatches", null);
        // parameter type is Boolean
        headers.put("CamelFhir.returnNull", null);
        // parameter type is org.hl7.fhir.instance.model.api.IBaseResource
        headers.put("CamelFhir.returnResource", null);
        // parameter type is Boolean
        headers.put("CamelFhir.throwError", null);

        final org.hl7.fhir.instance.model.api.IBaseResource result = requestBodyAndHeaders("direct://RESOURCEWITHID", null, headers);

        assertNotNull("resourceWithId result", result);
        LOG.debug("resourceWithId: " + result);
    }

    // TODO provide parameter values for resourceWithId
    @Ignore
    @Test
    public void testResourceWithId_1() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is Class
        headers.put("CamelFhir.resource", null);
        // parameter type is org.hl7.fhir.instance.model.api.IIdType
        headers.put("CamelFhir.idType", null);
        // parameter type is String
        headers.put("CamelFhir.ifVersionMatches", null);
        // parameter type is Boolean
        headers.put("CamelFhir.returnNull", null);
        // parameter type is org.hl7.fhir.instance.model.api.IBaseResource
        headers.put("CamelFhir.returnResource", null);
        // parameter type is Boolean
        headers.put("CamelFhir.throwError", null);

        final org.hl7.fhir.instance.model.api.IBaseResource result = requestBodyAndHeaders("direct://RESOURCEWITHID_1", null, headers);

        assertNotNull("resourceWithId result", result);
        LOG.debug("resourceWithId: " + result);
    }

    // TODO provide parameter values for resourceWithId
    @Ignore
    @Test
    public void testResourceWithId_2() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is Class
        headers.put("CamelFhir.resource", null);
        // parameter type is Long
        headers.put("CamelFhir.lId", null);
        // parameter type is String
        headers.put("CamelFhir.ifVersionMatches", null);
        // parameter type is Boolean
        headers.put("CamelFhir.returnNull", null);
        // parameter type is org.hl7.fhir.instance.model.api.IBaseResource
        headers.put("CamelFhir.returnResource", null);
        // parameter type is Boolean
        headers.put("CamelFhir.throwError", null);

        final org.hl7.fhir.instance.model.api.IBaseResource result = requestBodyAndHeaders("direct://RESOURCEWITHID_2", null, headers);

        assertNotNull("resourceWithId result", result);
        LOG.debug("resourceWithId: " + result);
    }

    // TODO provide parameter values for resourceWithId
    @Ignore
    @Test
    public void testResourceWithId_3() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is String
        headers.put("CamelFhir.resourceClass", null);
        // parameter type is String
        headers.put("CamelFhir.id", null);
        // parameter type is String
        headers.put("CamelFhir.ifVersionMatches", null);
        // parameter type is Boolean
        headers.put("CamelFhir.returnNull", null);
        // parameter type is org.hl7.fhir.instance.model.api.IBaseResource
        headers.put("CamelFhir.returnResource", null);
        // parameter type is Boolean
        headers.put("CamelFhir.throwError", null);

        final org.hl7.fhir.instance.model.api.IBaseResource result = requestBodyAndHeaders("direct://RESOURCEWITHID_3", null, headers);

        assertNotNull("resourceWithId result", result);
        LOG.debug("resourceWithId: " + result);
    }

    // TODO provide parameter values for resourceWithId
    @Ignore
    @Test
    public void testResourceWithId_4() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is String
        headers.put("CamelFhir.resourceClass", null);
        // parameter type is org.hl7.fhir.instance.model.api.IIdType
        headers.put("CamelFhir.idType", null);
        // parameter type is String
        headers.put("CamelFhir.ifVersionMatches", null);
        // parameter type is Boolean
        headers.put("CamelFhir.returnNull", null);
        // parameter type is org.hl7.fhir.instance.model.api.IBaseResource
        headers.put("CamelFhir.returnResource", null);
        // parameter type is Boolean
        headers.put("CamelFhir.throwError", null);

        final org.hl7.fhir.instance.model.api.IBaseResource result = requestBodyAndHeaders("direct://RESOURCEWITHID_4", null, headers);

        assertNotNull("resourceWithId result", result);
        LOG.debug("resourceWithId: " + result);
    }

    // TODO provide parameter values for resourceWithId
    @Ignore
    @Test
    public void testResourceWithId_5() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is String
        headers.put("CamelFhir.resourceClass", null);
        // parameter type is Long
        headers.put("CamelFhir.lId", null);
        // parameter type is String
        headers.put("CamelFhir.ifVersionMatches", null);
        // parameter type is Boolean
        headers.put("CamelFhir.returnNull", null);
        // parameter type is org.hl7.fhir.instance.model.api.IBaseResource
        headers.put("CamelFhir.returnResource", null);
        // parameter type is Boolean
        headers.put("CamelFhir.throwError", null);

        final org.hl7.fhir.instance.model.api.IBaseResource result = requestBodyAndHeaders("direct://RESOURCEWITHID_5", null, headers);

        assertNotNull("resourceWithId result", result);
        LOG.debug("resourceWithId: " + result);
    }

    // TODO provide parameter values for resourceWithIdAndVersion
    @Ignore
    @Test
    public void testResourceWithIdAndVersion() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is Class
        headers.put("CamelFhir.resource", null);
        // parameter type is String
        headers.put("CamelFhir.id", null);
        // parameter type is String
        headers.put("CamelFhir.version", null);
        // parameter type is String
        headers.put("CamelFhir.ifVersionMatches", null);
        // parameter type is Boolean
        headers.put("CamelFhir.returnNull", null);
        // parameter type is org.hl7.fhir.instance.model.api.IBaseResource
        headers.put("CamelFhir.returnResource", null);
        // parameter type is Boolean
        headers.put("CamelFhir.throwError", null);

        final org.hl7.fhir.instance.model.api.IBaseResource result = requestBodyAndHeaders("direct://RESOURCEWITHIDANDVERSION", null, headers);

        assertNotNull("resourceWithIdAndVersion result", result);
        LOG.debug("resourceWithIdAndVersion: " + result);
    }

    // TODO provide parameter values for resourceWithIdAndVersion
    @Ignore
    @Test
    public void testResourceWithIdAndVersion_1() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is String
        headers.put("CamelFhir.resourceClass", null);
        // parameter type is String
        headers.put("CamelFhir.id", null);
        // parameter type is String
        headers.put("CamelFhir.version", null);
        // parameter type is String
        headers.put("CamelFhir.ifVersionMatches", null);
        // parameter type is Boolean
        headers.put("CamelFhir.returnNull", null);
        // parameter type is org.hl7.fhir.instance.model.api.IBaseResource
        headers.put("CamelFhir.returnResource", null);
        // parameter type is Boolean
        headers.put("CamelFhir.throwError", null);

        final org.hl7.fhir.instance.model.api.IBaseResource result = requestBodyAndHeaders("direct://RESOURCEWITHIDANDVERSION_1", null, headers);

        assertNotNull("resourceWithIdAndVersion result", result);
        LOG.debug("resourceWithIdAndVersion: " + result);
    }

    // TODO provide parameter values for resourceWithUrl
    @Ignore
    @Test
    public void testResourceWithUrl() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is Class
        headers.put("CamelFhir.resource", null);
        // parameter type is org.hl7.fhir.instance.model.api.IIdType
        headers.put("CamelFhir.iUrl", null);
        // parameter type is String
        headers.put("CamelFhir.ifVersionMatches", null);
        // parameter type is Boolean
        headers.put("CamelFhir.returnNull", null);
        // parameter type is org.hl7.fhir.instance.model.api.IBaseResource
        headers.put("CamelFhir.returnResource", null);
        // parameter type is Boolean
        headers.put("CamelFhir.throwError", null);

        final org.hl7.fhir.instance.model.api.IBaseResource result = requestBodyAndHeaders("direct://RESOURCEWITHURL", null, headers);

        assertNotNull("resourceWithUrl result", result);
        LOG.debug("resourceWithUrl: " + result);
    }

    // TODO provide parameter values for resourceWithUrl
    @Ignore
    @Test
    public void testResourceWithUrl_1() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is Class
        headers.put("CamelFhir.resource", null);
        // parameter type is String
        headers.put("CamelFhir.url", null);
        // parameter type is String
        headers.put("CamelFhir.ifVersionMatches", null);
        // parameter type is Boolean
        headers.put("CamelFhir.returnNull", null);
        // parameter type is org.hl7.fhir.instance.model.api.IBaseResource
        headers.put("CamelFhir.returnResource", null);
        // parameter type is Boolean
        headers.put("CamelFhir.throwError", null);

        final org.hl7.fhir.instance.model.api.IBaseResource result = requestBodyAndHeaders("direct://RESOURCEWITHURL_1", null, headers);

        assertNotNull("resourceWithUrl result", result);
        LOG.debug("resourceWithUrl: " + result);
    }

    // TODO provide parameter values for resourceWithUrl
    @Ignore
    @Test
    public void testResourceWithUrl_2() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is String
        headers.put("CamelFhir.resourceClass", null);
        // parameter type is org.hl7.fhir.instance.model.api.IIdType
        headers.put("CamelFhir.iUrl", null);
        // parameter type is String
        headers.put("CamelFhir.ifVersionMatches", null);
        // parameter type is Boolean
        headers.put("CamelFhir.returnNull", null);
        // parameter type is org.hl7.fhir.instance.model.api.IBaseResource
        headers.put("CamelFhir.returnResource", null);
        // parameter type is Boolean
        headers.put("CamelFhir.throwError", null);

        final org.hl7.fhir.instance.model.api.IBaseResource result = requestBodyAndHeaders("direct://RESOURCEWITHURL_2", null, headers);

        assertNotNull("resourceWithUrl result", result);
        LOG.debug("resourceWithUrl: " + result);
    }

    // TODO provide parameter values for resourceWithUrl
    @Ignore
    @Test
    public void testResourceWithUrl_3() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is String
        headers.put("CamelFhir.resourceClass", null);
        // parameter type is String
        headers.put("CamelFhir.url", null);
        // parameter type is String
        headers.put("CamelFhir.ifVersionMatches", null);
        // parameter type is Boolean
        headers.put("CamelFhir.returnNull", null);
        // parameter type is org.hl7.fhir.instance.model.api.IBaseResource
        headers.put("CamelFhir.returnResource", null);
        // parameter type is Boolean
        headers.put("CamelFhir.throwError", null);

        final org.hl7.fhir.instance.model.api.IBaseResource result = requestBodyAndHeaders("direct://RESOURCEWITHURL_3", null, headers);

        assertNotNull("resourceWithUrl result", result);
        LOG.debug("resourceWithUrl: " + result);
    }

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            public void configure() {
                // test route for resourceWithId
                from("direct://RESOURCEWITHID")
                    .to("fhir://" + PATH_PREFIX + "/resourceWithId");

                // test route for resourceWithId
                from("direct://RESOURCEWITHID_1")
                    .to("fhir://" + PATH_PREFIX + "/resourceWithId");

                // test route for resourceWithId
                from("direct://RESOURCEWITHID_2")
                    .to("fhir://" + PATH_PREFIX + "/resourceWithId");

                // test route for resourceWithId
                from("direct://RESOURCEWITHID_3")
                    .to("fhir://" + PATH_PREFIX + "/resourceWithId");

                // test route for resourceWithId
                from("direct://RESOURCEWITHID_4")
                    .to("fhir://" + PATH_PREFIX + "/resourceWithId");

                // test route for resourceWithId
                from("direct://RESOURCEWITHID_5")
                    .to("fhir://" + PATH_PREFIX + "/resourceWithId");

                // test route for resourceWithIdAndVersion
                from("direct://RESOURCEWITHIDANDVERSION")
                    .to("fhir://" + PATH_PREFIX + "/resourceWithIdAndVersion");

                // test route for resourceWithIdAndVersion
                from("direct://RESOURCEWITHIDANDVERSION_1")
                    .to("fhir://" + PATH_PREFIX + "/resourceWithIdAndVersion");

                // test route for resourceWithUrl
                from("direct://RESOURCEWITHURL")
                    .to("fhir://" + PATH_PREFIX + "/resourceWithUrl");

                // test route for resourceWithUrl
                from("direct://RESOURCEWITHURL_1")
                    .to("fhir://" + PATH_PREFIX + "/resourceWithUrl");

                // test route for resourceWithUrl
                from("direct://RESOURCEWITHURL_2")
                    .to("fhir://" + PATH_PREFIX + "/resourceWithUrl");

                // test route for resourceWithUrl
                from("direct://RESOURCEWITHURL_3")
                    .to("fhir://" + PATH_PREFIX + "/resourceWithUrl");

            }
        };
    }
}
