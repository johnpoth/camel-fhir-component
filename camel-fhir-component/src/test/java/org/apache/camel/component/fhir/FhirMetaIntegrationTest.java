/*
 * Camel Api Route test generated by camel-api-component-maven-plugin
 * Generated on: Mon May 28 16:47:45 CEST 2018
 */
package org.apache.camel.component.fhir;

import java.util.HashMap;
import java.util.Map;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.fhir.internal.FhirApiCollection;
import org.apache.camel.component.fhir.internal.FhirMetaApiMethod;
import org.junit.Ignore;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Test class for {@link org.apache.camel.component.fhir.api.FhirMeta} APIs.
 * TODO Move the file to src/test/java, populate parameter values, and remove @Ignore annotations.
 * The class source won't be generated again if the generator MOJO finds it under src/test/java.
 */
public class FhirMetaIntegrationTest extends AbstractFhirTestSupport {

    private static final Logger LOG = LoggerFactory.getLogger(FhirMetaIntegrationTest.class);
    private static final String PATH_PREFIX = FhirApiCollection.getCollection().getApiName(FhirMetaApiMethod.class).getName();

    // TODO provide parameter values for add
    @Ignore
    @Test
    public void testAdd() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is org.hl7.fhir.instance.model.api.IBaseMetaType
        headers.put("CamelFhir.meta", null);
        // parameter type is org.hl7.fhir.instance.model.api.IIdType
        headers.put("CamelFhir.id", null);

        final org.hl7.fhir.instance.model.api.IBaseMetaType result = requestBodyAndHeaders("direct://ADD", null, headers);

        assertNotNull("add result", result);
        LOG.debug("add: " + result);
    }

    // TODO provide parameter values for delete
    @Ignore
    @Test
    public void testDelete() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is org.hl7.fhir.instance.model.api.IBaseMetaType
        headers.put("CamelFhir.meta", null);
        // parameter type is org.hl7.fhir.instance.model.api.IIdType
        headers.put("CamelFhir.id", null);

        final org.hl7.fhir.instance.model.api.IBaseMetaType result = requestBodyAndHeaders("direct://DELETE", null, headers);

        assertNotNull("delete result", result);
        LOG.debug("delete: " + result);
    }

    // TODO provide parameter values for getFromResource
    @Ignore
    @Test
    public void testGetFromResource() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is Class
        headers.put("CamelFhir.metaType", null);
        // parameter type is org.hl7.fhir.instance.model.api.IIdType
        headers.put("CamelFhir.id", null);

        final org.hl7.fhir.instance.model.api.IBaseMetaType result = requestBodyAndHeaders("direct://GETFROMRESOURCE", null, headers);

        assertNotNull("getFromResource result", result);
        LOG.debug("getFromResource: " + result);
    }

    // TODO provide parameter values for getFromServer
    @Ignore
    @Test
    public void testGetFromServer() throws Exception {
        // using Class message body for single parameter "metaType"
        final org.hl7.fhir.instance.model.api.IBaseMetaType result = requestBody("direct://GETFROMSERVER", null);

        assertNotNull("getFromServer result", result);
        LOG.debug("getFromServer: " + result);
    }

    // TODO provide parameter values for getFromType
    @Ignore
    @Test
    public void testGetFromType() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is Class
        headers.put("CamelFhir.metaType", null);
        // parameter type is String
        headers.put("CamelFhir.theResourceName", null);

        final org.hl7.fhir.instance.model.api.IBaseMetaType result = requestBodyAndHeaders("direct://GETFROMTYPE", null, headers);

        assertNotNull("getFromType result", result);
        LOG.debug("getFromType: " + result);
    }

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            public void configure() {
                // test route for add
                from("direct://ADD")
                    .to("fhir://" + PATH_PREFIX + "/add");

                // test route for delete
                from("direct://DELETE")
                    .to("fhir://" + PATH_PREFIX + "/delete");

                // test route for getFromResource
                from("direct://GETFROMRESOURCE")
                    .to("fhir://" + PATH_PREFIX + "/getFromResource");

                // test route for getFromServer
                from("direct://GETFROMSERVER")
                    .to("fhir://" + PATH_PREFIX + "/getFromServer?inBody=metaType");

                // test route for getFromType
                from("direct://GETFROMTYPE")
                    .to("fhir://" + PATH_PREFIX + "/getFromType");

            }
        };
    }
}
